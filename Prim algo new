#include <stdio.h>
#include <stdbool.h>

#define V 11
#define INF 99999

// Function to find the vertex with the minimum key value
// which is not yet included in the MST.
int minKey(int key[], bool mstSet[]) {
    int min = INF, min_index = -1;
    for (int v = 0; v < V; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

// Function to print the MST constructed by Prim's algorithm.
void primMST(int graph[V][V], char *cityNames[]) {
    int parent[V];   // Array to store constructed MST: parent[i] is the parent of i in MST.
    int key[V];      // Key values used to pick minimum weight edge in cut.
    bool mstSet[V];  // To represent the set of vertices included in MST.

    // Initialize all keys as INF and mstSet[] as false.
    for (int i = 0; i < V; i++) {
        key[i] = INF;
        mstSet[i] = false;
    }

    // Always include the first vertex in MST.
    key[0] = 0;
    parent[0] = -1;  // First node is always the root of the MST.

    // The MST will have V vertices.
    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet);
        mstSet[u] = true;

        // Update key value and parent index of the adjacent vertices of the picked vertex.
        for (int v = 0; v < V; v++) {
            // graph[u][v] is non-INF if u and v are adjacent.
            // Update key[v] only if graph[u][v] is smaller than key[v].
            if (!mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // Print the constructed MST and compute its total weight.
    int total_cost = 0;
    printf("Edge\t\tWeight\n");
    for (int i = 1; i < V; i++) {
        printf("%s - %s \t%d\n", cityNames[parent[i]], cityNames[i], graph[i][parent[i]]);
        total_cost += graph[i][parent[i]];
    }
    printf("Total cost of MST: %d\n", total_cost);
}

int main() {
    // Array of city names in the order corresponding to our graph indices
    char *cityNames[V] = {
        "Dyer", "Oasis", "Deep Springs", "Silverpeak", "Gold Point",
        "Lida", "Goldfield", "Beatty", "Tonopah", "Manhattan", "Warm Springs"
    };

    // Create and initialize the graph (adjacency matrix).
    int graph[V][V];
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            // Distance to the same vertex is 0; there is no edge between non-adjacent vertices.
            if (i == j)
                graph[i][j] = 0;
            else
                graph[i][j] = INF;
        }
    }

    // Define the edges from the dataset:
    // Dyer (0) <--> Oasis (1) = 21
    graph[0][1] = 21; graph[1][0] = 21;
    // Dyer (0) <--> Silverpeak (3) = 25
    graph[0][3] = 25; graph[3][0] = 25;
    // Dyer (0) <--> Tonopah (8) = 40
    graph[0][8] = 40; graph[8][0] = 40;
    // Dyer (0) <--> Manhattan (9) = 80
    graph[0][9] = 80; graph[9][0] = 80;
    // Oasis (1) <--> Silverpeak (3) = 23
    graph[1][3] = 23; graph[3][1] = 23;
    // Oasis (1) <--> Deep Springs (2) = 10
    graph[1][2] = 10; graph[2][1] = 10;
    // Silverpeak (3) <--> Goldfield (6) = 20
    graph[3][6] = 20; graph[6][3] = 20;
    // Silverpeak (3) <--> Lida (5) = 25
    graph[3][5] = 25; graph[5][3] = 25;
    // Goldfield (6) <--> Lida (5) = 35
    graph[6][5] = 35; graph[5][6] = 35;
    // Goldfield (6) <--> Tonopah (8) = 25
    graph[6][8] = 25; graph[8][6] = 25;
    // Goldfield (6) <--> Beatty (7) = 70
    graph[6][7] = 70; graph[7][6] = 70;
    // Lida (5) <--> Gold Point (4) = 12
    graph[5][4] = 12; graph[4][5] = 12;
    // Lida (5) <--> Beatty (7) = 45
    graph[5][7] = 45; graph[7][5] = 45;
    // Deep Springs (2) <--> Gold Point (4) = 30
    graph[2][4] = 30; graph[4][2] = 30;
    // Tonopah (8) <--> Manhattan (9) = 25
    graph[8][9] = 25; graph[9][8] = 25;
    // Tonopah (8) <--> Warm Springs (10) = 55
    graph[8][10] = 55; graph[10][8] = 55;
    // Manhattan (9) <--> Warm Springs (10) = 60
    graph[9][10] = 60; graph[10][9] = 60;

    // Run Prim's algorithm to compute and print the MST.
    primMST(graph, cityNames);

    return 0;
}
